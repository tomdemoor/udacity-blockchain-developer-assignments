// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');

// - use the contents from proof.json generated from zokrates steps
var proof = require('../../zokrates/code/square/proof.json');

contract('TestSquareVerifier', accounts => {
  const account_one = accounts[0];    // OWNER
  const account_two = accounts[1];    // TEST ACC

  describe('Test cases for Verifier contract', function () {
    beforeEach(async function () {
      // Initialize Contract
      this.contract = await Verifier.new({ from: account_one });
    });

    it('Test verification with correct proof', async function () {
      const isVerifiedTx = await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs);
      assert.equal(isVerifiedTx, true, 'Transcation could not be verified for correct proof');
    })


    it('Test verification with incorrect proof', async function () {
      // Made the input incorrect for verifyTx, so transcation verification fails
      const isVerifiedTx = await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, [1,2]);
      assert.equal(isVerifiedTx, false, 'Transcation verified for inccorect proof');
    })
  })
})
