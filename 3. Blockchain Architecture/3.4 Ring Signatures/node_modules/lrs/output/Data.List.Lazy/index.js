// Generated by psc version 0.9.3
"use strict";
var Prelude = require("../Prelude");
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Lazy = require("../Control.Lazy");
var Control_MonadPlus = require("../Control.MonadPlus");
var Control_MonadZero = require("../Control.MonadZero");
var Control_Plus = require("../Control.Plus");
var Data_Foldable = require("../Data.Foldable");
var Data_Lazy = require("../Data.Lazy");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Unfoldable = require("../Data.Unfoldable");
var Data_Show = require("../Data.Show");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Eq = require("../Data.Eq");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Function = require("../Data.Function");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Functor = require("../Data.Functor");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Monad = require("../Control.Monad");
var Control_Bind = require("../Control.Bind");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Data_Boolean = require("../Data.Boolean");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Control_Category = require("../Control.Category");
var List = function (x) {
    return x;
};
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var runList = function (v) {
    return v;
};
var step = function ($262) {
    return Data_Lazy.force(runList($262));
};
var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
    return function (ys) {
        var go = function (v) {
            if (v instanceof Nil) {
                return step(ys);
            };
            if (v instanceof Cons) {
                return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 770, column 5 - line 770, column 21: " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
    };
});
var showList = function (dictShow) {
    return new Data_Show.Show(function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return "Nil";
            };
            if (v instanceof Cons) {
                return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (go(step(v.value1)) + ")")));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 740, column 3 - line 745, column 1: " + [ v.constructor.name ]);
        };
        return "fromStrict (" + (go(step(xs)) + ")");
    });
};
var uncons = function (xs) {
    var $87 = step(xs);
    if ($87 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if ($87 instanceof Cons) {
        return new Data_Maybe.Just({
            head: $87.value0, 
            tail: $87.value1
        });
    };
    throw new Error("Failed pattern match at Data.List.Lazy line 302, column 13 - line 304, column 54: " + [ $87.constructor.name ]);
};
var tail = function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.tail;
    })(uncons(xs));
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var take = function (n) {
    return function (xs) {
        var go = function (v) {
            return function (v1) {
                if (v <= 0) {
                    return Nil.value;
                };
                if (v1 instanceof Nil) {
                    return Nil.value;
                };
                if (v1 instanceof Cons) {
                    return new Cons(v1.value0, take(v - 1)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 511, column 3 - line 511, column 24: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var takeWhile = function (p) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Cons && p(v.value0)) {
                return new Cons(v.value0, takeWhile(p)(v.value1));
            };
            return Nil.value;
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var updateAt = function (n) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v === 0 && v1 instanceof Cons) {
                        return new Cons(x, v1.value1);
                    };
                    if (v1 instanceof Cons) {
                        return new Cons(v1.value0, updateAt(v - 1)(x)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 384, column 3 - line 384, column 17: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(runList(xs));
        };
    };
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (v) {
                return function (v1) {
                    if (v instanceof Nil) {
                        return Nil.value;
                    };
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v instanceof Cons && v1 instanceof Cons) {
                        return new Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 677, column 3 - line 677, column 17: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs)))(runList(ys));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var $$null = function ($263) {
    return Data_Maybe.isNothing(uncons($263));
};
var nil = Data_Function.apply(List)(Data_Lazy.defer(function (v) {
    return Nil.value;
}));
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, nil);
var mapMaybe = function (f) {
    return function (xs) {
        var go = function (__copy_v) {
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return Nil.value;
                };
                if (v instanceof Cons) {
                    var $111 = f(v.value0);
                    if ($111 instanceof Data_Maybe.Nothing) {
                        var __tco_v = step(v.value1);
                        v = __tco_v;
                        continue tco;
                    };
                    if ($111 instanceof Data_Maybe.Just) {
                        return new Cons($111.value0, mapMaybe(f)(v.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 483, column 5 - line 485, column 39: " + [ $111.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 479, column 1 - line 485, column 39: " + [ v.constructor.name ]);
            };
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var length = function (xs) {
    var go = function (v) {
        if (v instanceof Nil) {
            return 0;
        };
        if (v instanceof Cons) {
            return 1 + go(step(v.value1)) | 0;
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 214, column 1 - line 217, column 36: " + [ v.constructor.name ]);
    };
    return go(step(xs));
};
var lazyList = new Control_Lazy.Lazy(function (f) {
    return Data_Function.apply(List)(Data_Lazy.defer(function ($264) {
        return step(f($264));
    }));
});
var last = function (xs) {
    var go = function (__copy_v) {
        var v = __copy_v;
        tco: while (true) {
            if (v instanceof Cons) {
                if ($$null(v.value1)) {
                    return new Data_Maybe.Just(v.value0);
                };
                if (Data_Boolean.otherwise) {
                    var __tco_v = step(v.value1);
                    v = __tco_v;
                    continue tco;
                };
            };
            return Data_Maybe.Nothing.value;
        };
    };
    return go(step(xs));
};
var index = function (xs) {
    var go = function (__copy_v) {
        return function (__copy_v1) {
            var v = __copy_v;
            var v1 = __copy_v1;
            tco: while (true) {
                if (v instanceof Nil) {
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Cons && v1 === 0) {
                    return new Data_Maybe.Just(v.value0);
                };
                if (v instanceof Cons) {
                    var __tco_v = step(v.value1);
                    var __tco_v1 = v1 - 1;
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 314, column 1 - line 318, column 42: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    };
    return go(step(xs));
};
var head = function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.head;
    })(uncons(xs));
};
var functorList = new Data_Functor.Functor(function (f) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 779, column 5 - line 779, column 17: " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
    };
});
var fromStep = function ($265) {
    return List(Control_Applicative.pure(Data_Lazy.applicativeLazy)($265));
};
var insertBy = function (cmp) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return new Cons(x, nil);
                };
                if (v instanceof Cons) {
                    var $131 = cmp(x)(v.value0);
                    if ($131 instanceof Data_Ordering.GT) {
                        return new Cons(v.value0, insertBy(cmp)(x)(v.value1));
                    };
                    return new Cons(x, fromStep(v));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 254, column 3 - line 254, column 22: " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v instanceof Cons) {
                    return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(v.value0))(Data_Foldable.foldMap(foldableList)(dictMonoid)(f)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 798, column 5 - line 798, column 20: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
}, function (o) {
    return function (b) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return b;
                };
                if (v instanceof Cons) {
                    return Data_Foldable.foldl(foldableList)(o)(o(b)(v.value0))(v.value1);
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 792, column 5 - line 792, column 15: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
}, function (o) {
    return function (b) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return b;
                };
                if (v instanceof Cons) {
                    return o(v.value0)(Data_Foldable.foldr(foldableList)(o)(b)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 786, column 5 - line 786, column 15: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
});
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return function (xs) {
                var $143 = uncons(xs);
                if ($143 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(a);
                };
                if ($143 instanceof Data_Maybe.Just) {
                    return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(a)($143.value0.head))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)($143.value0.tail);
                    });
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 730, column 5 - line 733, column 54: " + [ $143.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function (n) {
        return function (list) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function (v) {
                var $148 = fn(v.head);
                if ($148) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
                };
                if (!$148) {
                    return go(n + 1 | 0)(v.tail);
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 338, column 7 - line 340, column 32: " + [ $148.constructor.name ]);
            });
        };
    };
    return go(0);
};
var filter = function (p) {
    return function (xs) {
        var go = function (__copy_v) {
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return Nil.value;
                };
                if (v instanceof Cons) {
                    if (p(v.value0)) {
                        return new Cons(v.value0, filter(p)(v.value1));
                    };
                    if (Data_Boolean.otherwise) {
                        var __tco_v = step(v.value1);
                        v = __tco_v;
                        continue tco;
                    };
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 449, column 1 - line 454, column 31: " + [ v.constructor.name ]);
            };
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(Data_BooleanAlgebra.booleanAlgebraBoolean)(eq(x))(ys);
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var nubBy = function (eq) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return new Cons(v.value0, nubBy(eq)(filter(function (y) {
                    return !eq(v.value0)(y);
                })(v.value1)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 604, column 3 - line 604, column 15: " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var nub = function (dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var eqList = function (dictEq) {
    return new Data_Eq.Eq(function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    var v = __copy_v;
                    var v1 = __copy_v1;
                    tco: while (true) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            return true;
                        };
                        if (v instanceof Cons && (v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                            var __tco_v = step(v.value1);
                            var __tco_v1 = step(v1.value1);
                            v = __tco_v;
                            v1 = __tco_v1;
                            continue tco;
                        };
                        return false;
                    };
                };
            };
            return go(step(xs))(step(ys));
        };
    });
};
var ordList = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqList(dictOrd["__superclass_Data.Eq.Eq_0"]());
    }, function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    var v = __copy_v;
                    var v1 = __copy_v1;
                    tco: while (true) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            return Data_Ordering.EQ.value;
                        };
                        if (v instanceof Nil) {
                            return Data_Ordering.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            return Data_Ordering.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var $163 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                            if ($163 instanceof Data_Ordering.EQ) {
                                var __tco_v = step(v.value1);
                                var __tco_v1 = step(v1.value1);
                                v = __tco_v;
                                v1 = __tco_v1;
                                continue tco;
                            };
                            return $163;
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy line 754, column 3 - line 762, column 23: " + [ v.constructor.name, v1.constructor.name ]);
                    };
                };
            };
            return go(step(xs))(step(ys));
        };
    });
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    return function (xs) {
        var go = function (__copy_v) {
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Cons && p(v.value0)) {
                    var __tco_v = step(v.value1);
                    v = __tco_v;
                    continue tco;
                };
                return fromStep(v);
            };
        };
        return go(step(xs));
    };
};
var drop = function (n) {
    return function (xs) {
        var go = function (__copy_v) {
            return function (__copy_v1) {
                var v = __copy_v;
                var v1 = __copy_v1;
                tco: while (true) {
                    if (v === 0) {
                        return v1;
                    };
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v1 instanceof Cons) {
                        var __tco_v = v - 1;
                        var __tco_v1 = step(v1.value1);
                        v = __tco_v;
                        v1 = __tco_v1;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 528, column 1 - line 532, column 42: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(end - start)(drop(start)(xs));
        };
    };
};
var deleteBy = function (eq) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return Nil.value;
                };
                if (v instanceof Cons) {
                    if (eq(x)(v.value0)) {
                        return step(v.value1);
                    };
                    if (Data_Boolean.otherwise) {
                        return new Cons(v.value0, deleteBy(eq)(x)(v.value1));
                    };
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 633, column 3 - line 633, column 15: " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var deleteAt = function (n) {
    return function (xs) {
        var go = function (v) {
            return function (v1) {
                if (v1 instanceof Nil) {
                    return Nil.value;
                };
                if (v === 0 && v1 instanceof Cons) {
                    return step(v1.value1);
                };
                if (v1 instanceof Cons) {
                    return new Cons(v1.value0, deleteAt(v - 1)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 370, column 3 - line 370, column 17: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldl(foldableList)(Data_Function.flip($$delete(dictEq)));
};
var cycle = function (xs) {
    return Control_Lazy.fix(lazyList)(function (ys) {
        return Data_Semigroup.append(semigroupList)(xs)(ys);
    });
};
var cons = function (x) {
    return function (xs) {
        return Data_Function.apply(List)(Data_Lazy.defer(function (v) {
            return new Cons(x, xs);
        }));
    };
};
var filterM = function (dictMonad) {
    return function (p) {
        return function (list) {
            var $185 = uncons(list);
            if ($185 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(nil);
            };
            if ($185 instanceof Data_Maybe.Just) {
                return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(p($185.value0.head))(function (v) {
                    return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(filterM(dictMonad)(p)($185.value0.tail))(function (v1) {
                        return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())((function () {
                            if (v) {
                                return cons($185.value0.head)(v1);
                            };
                            if (!v) {
                                return v1;
                            };
                            throw new Error("Failed pattern match at Data.List.Lazy line 471, column 14 - line 471, column 48: " + [ v.constructor.name ]);
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 466, column 5 - line 471, column 48: " + [ $185.constructor.name ]);
        };
    };
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(cons)(nil);
};
var init = function (xs) {
    var go = function (v) {
        if (v instanceof Cons) {
            if ($$null(v.value1)) {
                return new Data_Maybe.Just(nil);
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(cons(v.value0))(go(step(v.value1)));
            };
        };
        return Data_Maybe.Nothing.value;
    };
    return go(step(xs));
};
var insertAt = function (v) {
    return function (x) {
        return function (xs) {
            if (v === 0) {
                return cons(x)(xs);
            };
            var go = function (v1) {
                if (v1 instanceof Nil) {
                    return new Cons(x, nil);
                };
                if (v1 instanceof Cons) {
                    return new Cons(v1.value0, insertAt(v - 1)(x)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 357, column 3 - line 357, column 22: " + [ v1.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var iterate = function (f) {
    return function (x) {
        return Control_Lazy.fix(lazyList)(function (xs) {
            return cons(x)(Data_Functor.map(functorList)(f)(xs));
        });
    };
};
var repeat = function (x) {
    return Control_Lazy.fix(lazyList)(function (xs) {
        return cons(x)(xs);
    });
};
var replicate = function (i) {
    return function (xs) {
        return take(i)(repeat(xs));
    };
};
var replicateM = function (dictMonad) {
    return function (n) {
        return function (m) {
            if (n < 1) {
                return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(nil);
            };
            if (Data_Boolean.otherwise) {
                return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
                    return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(replicateM(dictMonad)(n - 1)(m))(function (v1) {
                        return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(cons(v)(v1));
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 181, column 1 - line 186, column 23: " + [ n.constructor.name, m.constructor.name ]);
        };
    };
};
var reverse = function (xs) {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var acc = __copy_acc;
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return acc;
                };
                if (v instanceof Cons) {
                    var __tco_acc = cons(v.value0)(acc);
                    var __tco_v = step(v.value1);
                    acc = __tco_acc;
                    v = __tco_v;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 424, column 1 - line 427, column 49: " + [ acc.constructor.name, v.constructor.name ]);
            };
        };
    };
    return go(nil)(step(xs));
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
            return length(xs) - 1 - v;
        })(findIndex(fn)(reverse(xs)));
    };
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var singleton = function (a) {
    return cons(a)(nil);
};
var snoc = function (xs) {
    return function (x) {
        return Data_Foldable.foldr(foldableList)(cons)(cons(x)(nil))(xs);
    };
};
var span = function (p) {
    return function (xs) {
        var $209 = uncons(xs);
        if ($209 instanceof Data_Maybe.Just && p($209.value0.head)) {
            var $210 = span(p)($209.value0.tail);
            return {
                init: cons($209.value0.head)($210.init), 
                rest: $210.rest
            };
        };
        return {
            init: nil, 
            rest: xs
        };
    };
};
var groupBy = function (eq) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                var $217 = span(eq(v.value0))(v.value1);
                return new Cons(cons(v.value0)($217.init), groupBy(eq)($217.rest));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 582, column 3 - line 582, column 15: " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var group = function (dictEq) {
    return groupBy(Data_Eq.eq(dictEq));
};
var transpose = function (xs) {
    var $222 = uncons(xs);
    if ($222 instanceof Data_Maybe.Nothing) {
        return xs;
    };
    if ($222 instanceof Data_Maybe.Just) {
        var $223 = uncons($222.value0.head);
        if ($223 instanceof Data_Maybe.Nothing) {
            return transpose($222.value0.tail);
        };
        if ($223 instanceof Data_Maybe.Just) {
            return cons(cons($223.value0.head)(mapMaybe(head)($222.value0.tail)))(transpose(cons($223.value0.tail)(mapMaybe(tail)($222.value0.tail))));
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 717, column 7 - line 721, column 71: " + [ $223.constructor.name ]);
    };
    throw new Error("Failed pattern match at Data.List.Lazy line 713, column 3 - line 721, column 71: " + [ $222.constructor.name ]);
};
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Control_Applicative.pure(dictApplicative)(nil);
            };
            if (v instanceof Cons) {
                return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(cons)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 819, column 5 - line 819, column 22: " + [ v.constructor.name ]);
        };
        return go(step(xs));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return Control_Applicative.pure(dictApplicative)(nil);
                };
                if (v instanceof Cons) {
                    return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(cons)(f(v.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(f)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 813, column 5 - line 813, column 22: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
});
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return nil;
            };
            if (v instanceof Data_Maybe.Just) {
                return cons(v.value0.value0)(Control_Lazy.defer(lazyList)(function (v1) {
                    return go(f(v.value0.value1));
                }));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 803, column 3 - line 807, column 55: " + [ v.constructor.name ]);
        };
        return go(f(b));
    };
});
var range = function (start) {
    return function (end) {
        if (start > end) {
            var g = function (x) {
                if (x >= end) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 167, column 13 - line 168, column 38: " + [ x.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(unfoldableList)(g)(start);
        };
        if (Data_Boolean.otherwise) {
            var f = function (x) {
                if (x <= end) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 172, column 5 - line 173, column 30: " + [ x.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(unfoldableList)(f)(start);
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 165, column 1 - line 173, column 30: " + [ start.constructor.name, end.constructor.name ]);
    };
};
var unzip = Data_Foldable.foldr(foldableList)(function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(cons(v.value0)(v1.value0), cons(v.value1)(v1.value1));
    };
})(new Data_Tuple.Tuple(nil, nil));
var concatMap = function (f) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return step(Data_Semigroup.append(semigroupList)(f(v.value0))(concatMap(f)(v.value1)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 442, column 3 - line 442, column 15: " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
var monadList = new Control_Monad.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var bindList = new Control_Bind.Bind(function () {
    return applyList;
}, Data_Function.flip(concatMap));
var applyList = new Control_Apply.Apply(function () {
    return functorList;
}, Control_Monad.ap(monadList));
var applicativeList = new Control_Applicative.Applicative(function () {
    return applyList;
}, singleton);
var concat = function (v) {
    return Control_Bind.bind(bindList)(v)(Control_Category.id(Control_Category.categoryFn));
};
var alterAt = function (n) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v === 0 && v1 instanceof Cons) {
                        var $256 = f(v1.value0);
                        if ($256 instanceof Data_Maybe.Nothing) {
                            return step(v1.value1);
                        };
                        if ($256 instanceof Data_Maybe.Just) {
                            return new Cons($256.value0, v1.value1);
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy line 411, column 22 - line 413, column 26: " + [ $256.constructor.name ]);
                    };
                    if (v1 instanceof Cons) {
                        return new Cons(v1.value0, alterAt(v - 1)(f)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 410, column 3 - line 410, column 17: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(runList(xs));
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($266) {
            return Data_Maybe.Just.create(f($266));
        });
    };
};
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function () {
    return applicativeList;
}, function () {
    return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
    return alternativeList;
}, function () {
    return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroList;
});
module.exports = {
    List: List, 
    Nil: Nil, 
    Cons: Cons, 
    alterAt: alterAt, 
    catMaybes: catMaybes, 
    concat: concat, 
    concatMap: concatMap, 
    cons: cons, 
    cycle: cycle, 
    "delete": $$delete, 
    deleteAt: deleteAt, 
    deleteBy: deleteBy, 
    difference: difference, 
    drop: drop, 
    dropWhile: dropWhile, 
    elemIndex: elemIndex, 
    elemLastIndex: elemLastIndex, 
    filter: filter, 
    filterM: filterM, 
    findIndex: findIndex, 
    findLastIndex: findLastIndex, 
    foldM: foldM, 
    fromFoldable: fromFoldable, 
    group: group, 
    groupBy: groupBy, 
    head: head, 
    index: index, 
    init: init, 
    insert: insert, 
    insertAt: insertAt, 
    insertBy: insertBy, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    iterate: iterate, 
    last: last, 
    length: length, 
    mapMaybe: mapMaybe, 
    modifyAt: modifyAt, 
    nil: nil, 
    nub: nub, 
    nubBy: nubBy, 
    "null": $$null, 
    range: range, 
    repeat: repeat, 
    replicate: replicate, 
    replicateM: replicateM, 
    reverse: reverse, 
    runList: runList, 
    singleton: singleton, 
    slice: slice, 
    snoc: snoc, 
    span: span, 
    step: step, 
    tail: tail, 
    take: take, 
    takeWhile: takeWhile, 
    toUnfoldable: toUnfoldable, 
    transpose: transpose, 
    uncons: uncons, 
    union: union, 
    unionBy: unionBy, 
    unzip: unzip, 
    updateAt: updateAt, 
    zip: zip, 
    zipWith: zipWith, 
    zipWithA: zipWithA, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    lazyList: lazyList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadZeroList: monadZeroList, 
    monadPlusList: monadPlusList
};
