// Generated by psc version 0.9.3
"use strict";
var Crypto_Sha512 = require("../Crypto.Sha512");
var Data_Array = require("../Data.Array");
var Data_BigInt = require("../Data.BigInt");
var Data_Foldable = require("../Data.Foldable");
var Data_LGroup = require("../Data.LGroup");
var Data_Maybe = require("../Data.Maybe");
var Data_Modular = require("../Data.Modular");
var Prelude = require("../Prelude");
var Debug_Trace = require("../Debug.Trace");
var Data_Show = require("../Data.Show");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Semiring = require("../Data.Semiring");
var Data_Ring = require("../Data.Ring");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Signature = (function () {
    function Signature(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Signature.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Signature(value0, value1, value2);
            };
        };
    };
    return Signature;
})();
var Party = (function () {
    function Party(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Party.create = function (value0) {
        return function (value1) {
            return new Party(value0, value1);
        };
    };
    return Party;
})();
var showSignature = new Data_Show.Show(function (v) {
    return "(Signature " + (Data_Show.show(Data_BigInt.showBigInt)(v.value0) + (" " + (Data_Show.show(Data_BigInt.showBigInt)(v.value1) + (" " + (Data_Show.show(Data_Show.showArray(Data_BigInt.showBigInt))(v.value2) + ")")))));
});
var pureLink = function (v) {
    return function (v1) {
        return Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(v1.value0);
    };
};
var publicKey = function (v) {
    return v.value0;
};
var privateKey = function (v) {
    return v.value1;
};
var makePublicKey = function (v) {
    return function (priv) {
        return Data_Modular.mPow(v.value2)(v.value0)(priv);
    };
};
var b2 = Data_BigInt.fromInt(2);
var b1 = Data_BigInt.fromInt(1);
var b0 = Data_BigInt.fromInt(0);
var hash = function (v) {
    return function (salt) {
        return function (bits) {
            var distinctHashes = Data_Functor.map(Data_Functor.functorArray)(function (x) {
                return Crypto_Sha512.hmacSha512(x)(salt + bits);
            })(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                return salt + v1;
            })([ "a", "b", "c", "d", "e" ]));
            var hashed2560bits = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupString))("")(distinctHashes);
            var bigInt = Data_Maybe.fromMaybe(b0)(Data_BigInt.fromBase(16)(hashed2560bits));
            return Data_Modular.mMod(bigInt)(v.value1);
        };
    };
};
var hash1 = function (v) {
    return function (bits) {
        return hash(v)("salt1")(bits);
    };
};
var hash2 = function (v) {
    return function (bits) {
        var h = Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Modular.mMod(hash(v)("salt3")(bits))(Data_Ring.sub(Data_BigInt.ringBigInt)(v.value1)(b2)))(b2);
        return Data_Modular.mMod(Data_Semiring.mul(Data_BigInt.semiringBigInt)(h)(h))(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(b2)(v.value1))(b1));
    };
};
var pureVerify = function (v) {
    return function (y) {
        return function (v1) {
            return function (m) {
                var l = Data_Modular.mJoin(y);
                var h = hash2(v)(l);
                var b = Data_Modular.mMul(v.value2)(Data_Modular.mPow(v.value2)(h)(v1.value1))(Data_Modular.mPow(v.value2)(v1.value0)(Data_Foldable.sum(Data_Foldable.foldableArray)(Data_BigInt.semiringBigInt)(v1.value2)));
                var a = Data_Modular.mMul(v.value2)(Data_Modular.mPow(v.value2)(v.value0)(v1.value1))(Data_Modular.mProd(v.value2)(Data_Array.zipWith(Data_Modular.mPow(v.value2))(y)(v1.value2)));
                var h1 = hash1(v)(l + (Data_Modular.mJoin([ v1.value0 ]) + (m + Data_Modular.mJoin([ a, b ]))));
                return Data_Eq.eq(Data_BigInt.eqBigInt)(Data_EuclideanRing.mod(Data_BigInt.euclideanRingBigInt)(Data_Foldable.sum(Data_Foldable.foldableArray)(Data_BigInt.semiringBigInt)(v1.value2))(v.value1))(h1);
            };
        };
    };
};
var pureSign = function (rands) {
    return function (v) {
        return function (y) {
            return function (v1) {
                return function (m) {
                    var n = Data_Maybe.fromMaybe(0)(Data_Array.findIndex(function (v2) {
                        return Data_Eq.eq(Data_BigInt.eqBigInt)(v1.value0)(v2);
                    })(y));
                    var l = Data_Modular.mJoin(y);
                    var h = hash2(v)(l);
                    var y0 = Data_Modular.mPow(v.value2)(h)(v1.value1);
                    var e = Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                        return Data_Modular.mMod(v2)(v.value1);
                    })(rands);
                    var r = Data_Maybe.fromMaybe(b0)(Data_Array.index(e)(n));
                    var c = Data_Maybe.fromMaybe(e)(Data_Array.updateAt(n)(b0)(e));
                    var sc = Data_Foldable.sum(Data_Foldable.foldableArray)(Data_BigInt.semiringBigInt)(c);
                    var b = Data_Modular.mMul(v.value2)(Data_Modular.mPow(v.value2)(h)(r))(Data_Modular.mPow(v.value2)(y0)(sc));
                    var a = Data_Modular.mMul(v.value2)(Data_Modular.mPow(v.value2)(v.value0)(r))(Data_Modular.mProd(v.value2)(Data_Array.zipWith(Data_Modular.mPow(v.value2))(y)(c)));
                    var h1 = hash1(v)(l + (Data_Modular.mJoin([ y0 ]) + (m + Data_Modular.mJoin([ a, b ]))));
                    var ci = Data_Modular.mMod(Data_Ring.sub(Data_BigInt.ringBigInt)(h1)(sc))(v.value1);
                    var s = Data_Modular.mMod(Data_Ring.sub(Data_BigInt.ringBigInt)(r)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(ci)(v1.value1)))(v.value1);
                    var sig = new Signature(y0, s, Data_Maybe.fromMaybe(c)(Data_Array.updateAt(n)(ci)(c)));
                    return sig;
                };
            };
        };
    };
};
module.exports = {
    Party: Party, 
    Signature: Signature, 
    makePublicKey: makePublicKey, 
    privateKey: privateKey, 
    publicKey: publicKey, 
    pureLink: pureLink, 
    pureSign: pureSign, 
    pureVerify: pureVerify, 
    showSignature: showSignature
};
