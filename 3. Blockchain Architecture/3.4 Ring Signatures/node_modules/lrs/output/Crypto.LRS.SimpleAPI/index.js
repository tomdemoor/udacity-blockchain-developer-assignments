// Generated by psc version 0.9.3
"use strict";
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Crypto_LRS = require("../Crypto.LRS");
var Data_Array = require("../Data.Array");
var Data_BigInt = require("../Data.BigInt");
var Data_BigInt_Random = require("../Data.BigInt.Random");
var Data_LGroup = require("../Data.LGroup");
var Data_Modular = require("../Data.Modular");
var Data_Unfoldable = require("../Data.Unfoldable");
var Prelude = require("../Prelude");
var Control_Bind = require("../Control.Bind");
var Control_Applicative = require("../Control.Applicative");
var Data_Functor = require("../Data.Functor");
var Data_Traversable = require("../Data.Traversable");
var link = Crypto_LRS.pureLink;
var defaultLGroup = Data_LGroup.lgMedium;
var gen = function __do() {
    var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (v1) {
        return Data_Modular.mMod(v1)(defaultLGroup.value1);
    })(Data_BigInt_Random.random(256))();
    return new Crypto_LRS.Party(Crypto_LRS.makePublicKey(defaultLGroup)(v1), v1);
};
var sign = function (ring) {
    return function (party) {
        return function (message) {
            return function __do() {
                var v = Data_Unfoldable.replicateA(Control_Monad_Eff.applicativeEff)(Data_Unfoldable.unfoldableArray)(Data_Traversable.traversableArray)(Data_Array.length(ring))(Data_BigInt_Random.random(256))();
                return Crypto_LRS.pureSign(v)(defaultLGroup)(ring)(party)(message);
            };
        };
    };
};
var verify = Crypto_LRS.pureVerify(defaultLGroup);
module.exports = {
    gen: gen, 
    link: link, 
    sign: sign, 
    verify: verify
};
