// Generated by psc version 0.9.3
"use strict";
var Data_BigInt = require("../Data.BigInt");
var Data_Foldable = require("../Data.Foldable");
var Data_String = require("../Data.String");
var Prelude = require("../Prelude");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Semiring = require("../Data.Semiring");
var Data_Functor = require("../Data.Functor");
var Data_Ring = require("../Data.Ring");
var Data_Boolean = require("../Data.Boolean");
var mMod = function (a) {
    return function (b) {
        var ab = Data_EuclideanRing.mod(Data_BigInt.euclideanRingBigInt)(a)(b);
        var $0 = Data_BigInt.negative(ab);
        if ($0) {
            return Data_EuclideanRing.mod(Data_BigInt.euclideanRingBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(ab)(b))(b);
        };
        if (!$0) {
            return ab;
        };
        throw new Error("Failed pattern match at Data.Modular line 9, column 12 - line 9, column 56: " + [ $0.constructor.name ]);
    };
};
var mMul = function (p) {
    return function (a) {
        return function (b) {
            return mMod(Data_Semiring.mul(Data_BigInt.semiringBigInt)(a)(b))(p);
        };
    };
};
var mJoin = function (ints) {
    return Data_String.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(Data_BigInt.toBase(16))(ints));
};
var big2 = Data_BigInt.fromInt(2);
var mPow = function (p) {
    return function (a) {
        return function (b) {
            if (Data_BigInt.negative(b)) {
                return mInv(p)(Data_BigInt.modPow(a)(Data_Ring.negate(Data_BigInt.ringBigInt)(b))(p));
            };
            if (Data_Boolean.otherwise) {
                return Data_BigInt.modPow(a)(b)(p);
            };
            throw new Error("Failed pattern match at Data.Modular line 13, column 1 - line 15, column 30: " + [ p.constructor.name, a.constructor.name, b.constructor.name ]);
        };
    };
};
var mInv = function (p) {
    return function (i) {
        return mPow(p)(i)(Data_Ring.sub(Data_BigInt.ringBigInt)(p)(big2));
    };
};
var big1 = Data_BigInt.fromInt(1);
var mProd = function (p) {
    return function (a) {
        return Data_Foldable.foldr(Data_Foldable.foldableArray)(mMul(p))(big1)(a);
    };
};
module.exports = {
    big1: big1, 
    big2: big2, 
    mInv: mInv, 
    mJoin: mJoin, 
    mMod: mMod, 
    mMul: mMul, 
    mPow: mPow, 
    mProd: mProd
};
